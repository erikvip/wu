#!/bin/bash
export LC_ALL=en_US.UTF-8

set -o nounset  # Fail when access undefined variable
set -o errexit  # Exit when a command fails

#
# Check for symlinked options in filename
# like wu_city-name_state, can also have options specified. 
# Examples:
# ./wu_ca_san-diego_--decimal_--daynight_--debug symlinked to ./wu
# 
if [[ $(basename "$0") != $(basename $(realpath "$0")) ]]; then
	_parts=$(echo `basename "$0"` | awk -F'_' '{ ORS=" "; for (i=1; i<=NF; ++i) { print $i; };}' );
	eval "_wu_parts=(${_parts})";
	_cmd="$(realpath "$0") ${_wu_parts[@]:1}";
	eval $_cmd;
	exit;
fi	

BASEDIR=$(dirname `realpath $0`);
_D="${BASEDIR}";
_WU_DEFAULT_CITY="post-mountain";
_WU_DEFAULT_STATE="ca";
_WU_TEMPLATE="text";
COLUMNS=$(stty size | cut -d' ' -f2);

#_WU_OPT_SIZE="full";
#if [[ "$COLUMNS" < 100 && "$COLUMNS" > 70 ]]; then
#	_WU_OPT_SIZE="compact";
#fi
#if [[ "$COLUMNS" < 70 ]]; then
#	_WU_OPT_SIZE="mini";
#fi

#export _WU_OPT_SIZE;
export _WU_OPT_DECIMAL=0;
export _WU_OPT_DEBUG=0;
export _WU_OPT_LEGEND=0;
export _WU_OPT_TOTALS=0;
export _WU_OPT_DAYNIGHT=0;
export _WU_OPT_SKIP_DOWNLOAD=0;
export _WU_OPT_ASTRO=0;
export _WU_OPT_HOURLY=0;
export _WU_OPT_HEADER="";
export _WU_OPT_FOOTER="";

[ "$COLUMNS" -lt 105 -a "$COLUMNS" -gt 85 ] && _WU_OPT_DAYNIGHT=1;
[ "$COLUMNS" -lt 85 ] && _WU_OPT_TOTALS=1;

PARSED_OPTIONS=$( getopt -o "ldetar" --long "astro,skip-download,daynight,totals,legend,debug,decimal,hourly,header:,footer:" -- "$@" )
eval set -- "$PARSED_OPTIONS"
while [[ ! -z "$1" ]]; do
	case "$1" in
		-d|--debug) export _WU_OPT_DEBUG=1; shift;;
		-e|--decimal) export _WU_OPT_DECIMAL=1; shift;;
		-l|--legend) export _WU_OPT_LEGEND=1; shift;;
		-t|--totals) export _WU_OPT_TOTALS=1; shift;;
		--skip-download) export _WU_OPT_SKIP_DOWNLOAD=1; shift;;
		--daynight) export _WU_OPT_DAYNIGHT=1; shift;;
		-a|--astro) export _WU_OPT_ASTRO=1; shift;;
		-r|--hourly) export _WU_OPT_HOURLY=1; shift;;
		--header) shift; export _WU_OPT_HEADER="$1"; shift;;
		--footer) shift; export _WU_OPT_FOOTER="$1"; shift;;
		--) shift; break;;
	esac
done;

_loc=${1:-$_WU_DEFAULT_CITY}; 
_state=${2:-$_WU_DEFAULT_STATE}; 

[ "$_WU_OPT_DEBUG" -eq 1 ] && echo -ne "Options debug: $_WU_OPT_DEBUG decimal: $_WU_OPT_DECIMAL city:$_loc state:$_state \n";

#################################################
## Gather weather data from wunderground and parse
##
#################################################
fetch_data() {
	#wget -q --show-progress --progress=bar --user-agent="Chrome" -O "data/${_loc}" "https://www.wunderground.com/forecast/us/${_state}/${_loc}"
	_wget_level="-v";
	[ "$_WU_OPT_DEBUG" -ne 1 ] && _wget_level="-q ";

	if [[ "${_WU_OPT_SKIP_DOWNLOAD}" -eq 0 ]]; then
		wget $_wget_level --user-agent="Chrome" -O "$_D/data/${_state}-${_loc}.html" "https://www.wunderground.com/forecast/us/${_state}/${_loc}"
	else
		debug "Skipping download"
	fi

	cat "$_D/data/${_state}-${_loc}.html" \
		| egrep -o '<script [^>]*type="application/json">.*</script>' \
		| sed 's/<[^>]*>//g' \
		| sed 's/\&q\;/"/g' \
		| jq '.[][] as $d | $d | select(type == "object") as $o | select( .url | ( index("/v3/wx/","/v2/pws", "/v2/astro")  ) ) as $i | $i.url | ( split("?") | .[0] | split("/")[3:8] | join("/")) as $type | {"type":"\($type)", "data":$i.value} as $done | $done' \
		| jq --slurp '.' \
		> "$_D/data/${_state}-${_loc}.json"

	cat "$_D/data/${_state}-${_loc}.json" \
		| jq -r '.[] | select(.type=="v3/wx/forecast/daily/10day") | .data' \
		> "$_D/data/v3-wx-forecast-daily-10day.${_state}-${_loc}.json"

	cat "$_D/data/${_state}-${_loc}.json" \
		| jq -r '.[] | select(.type=="v3/wx/forecast/hourly/15day") | .data' \
		> "$_D/data/v3-wx-forecast-hourly-15day.${_state}-${_loc}.json"

	cat "$_D/data/${_state}-${_loc}.json" \
		| jq -r '.[] | select(.type=="v2/astro") | .data' \
		> "$_D/data/v2-astro.${_state}-${_loc}.json"
}

show_new_forecast() {
	# Create bash assocaitve array from JSON forecast data
	declare -A overview

	while IFS=$'\n' read -r v; do
		eval "$v";
	done < <(cat "${BASEDIR}/data/${_state}-${_loc}.forecast.json" \
		| jq -r '.[0] | to_entries[] | select(.value | type!="object") | "overview[\"\(.key)\"]=\(.value|@sh)"')

	echo ${overview["temperatureWidget"]};
}

show_forecast() {
	
	[ -n "${_WU_OPT_HEADER}" ] && echo "${_WU_OPT_HEADER}"

	echo '[0,1,2,3,4,5,6,7,8,9,10]' \
		| jq  \
			-L "$_D/lib" \
		    --slurpfile w "${BASEDIR}/data/v3-wx-forecast-daily-10day.${_state}-${_loc}.json" \
		    --slurpfile a "${BASEDIR}/data/v2-astro.${_state}-${_loc}.json" \
		    -f "${BASEDIR}/lib/forecast-daily-10day.txt.js" \
		| jq -s . > "${BASEDIR}/data/${_state}-${_loc}.forecast.json"

		cat "${BASEDIR}/data/${_state}-${_loc}.forecast.json" \
		| jq \
			-L "$_D/lib" \
			--raw-output \
			--slurpfile a "${BASEDIR}/data/v2-astro.${_state}-${_loc}.json" \
			-f "${BASEDIR}/lib/forecast-template.text.js" 
		#| column -s',' -t

		if [[ "$_WU_OPT_LEGEND" -eq 1 ]]; then
			hr 55 false
			cat "${BASEDIR}/lib/legend.txt" | column -s ',' -t
		fi
	[ -n "${_WU_OPT_FOOTER}" ] && echo "${_WU_OPT_FOOTER}"
}

show_hourly_forecast() {

	cat "${BASEDIR}/data/v3-wx-forecast-hourly-15day.ca-post-mountain.json" \
		| jq --arg opts "{}" -r -f "${BASEDIR}/lib/forecast-hourly.js" \
		| column -s, -t
}

main() {

	if [ ! -e "$_D/data/${_state}-${_loc}.json" ]; then
		debug "$_D/data/${_state}-${_loc}.json does not exist."
		[ "${_WU_OPT_SKIP_DOWNLOAD}" -eq 1 ] && errorexit "Error: --skip-download cannot find any cached downloads for '${_loc@U} ${_state@U}'\n$_D/data/${_state}-${_loc}.json does not exist."; 
		fetch_data
	fi
		
	# Check expiration of locally cached weather data
	_exp=$(cat $_D/data/${_state}-${_loc}.json | jq '[ .[] | select(.type=="v3/wx/observations/current") | .data .expirationTimeUtc ] | max');
	if [[ ${_exp} == null ]]; then 
		_exp=0; 
	fi

	_cur=$(date --utc '+%s');
	_diff=$(( $_exp - $_cur ))
	debug "Data expiration check for ${_loc}. Exp: $_exp Cur: ${_cur} Diff: ${_diff}"
	if [[ $_diff -lt -300 ]]; then
		stderr "Data expired for ${_loc}."
		fetch_data
	fi;

	if [[ "$_WU_OPT_HOURLY" != "1" ]]; then
		show_forecast
	else
		show_hourly_forecast
	fi
}

hr() {
	local _span=${1:-100};
	local _max=$(tput cols);
	local _width=$(( $_max * $_span / 100));
	local _prebreak=${2:-true};
	if [[ $_prebreak == true ]]; then echo; fi
	#printf '\xe2\x80\x95%.0s' $( seq 1 $(tput cols) ); 
	printf '\xe2\x80\x95%.0s' $( seq 1 $_width ); 
	echo; 
}

#―――――――――――――――――
debug() {
	if [[ "$_WU_OPT_DEBUG" == 1 ]]; then stderr "$@"; fi
}

# Write messages to stderr
stderr() {
	local _msg="$@";
	(>&2 echo -e "${_msg}")
}

errorexit() {
	stderr $*
	exit 1;
}


main
exit 0
	
